# Migrate to import iform data to database
#
# Forms::TaskInspection's Model
#
# Properties:
# - id (integer) - primary key
# - reference_number (string) - reference number assigned to each report by ProntoForms
# - server_receive_date (date/time) - date and time the server received the report
# - device_submit_date (date/time) - date and time the form was submitted
# - username (string) - email address of the user
# - version (string) - current version of the form
# - altitude (decimal(20,20)) - altitude of the user's location when submitted the form
# - latitude (decimal(20,20)) - latitude of the user's location when submitted the form
# - longitude (decimal(20,20)) - longitude of the user's location when submitted the form
# - source (string) - name of the provider, for example,"prontoforms", "iforms", etc
# - submission (attachment) - json file attachment of the form submission

# - inspection_date (date) - 
# - client (string) - 
# - site (string) - 
# - shop (string) - 
# - num_tasks (integer) - 
# - task1 (string) - 
# - abnormality1 (string) - 
# - abnormality_desc1 (text) - 
# - abnormality_picture1 (attachment) - 
# - picture_before_task1 (attachment) - 
# - picture_after_task1 (attachment) - 
# - quality_evaluation1 (string) - 
# - comments_task1 (text) - 
# - task2 (string) - 
# - abnormality2 (string) - 
# - abnormality_desc2 (text) - 
# - abnormality_picture2 (attachment) - 
# - picture_before_task2 (attachment) - 
# - picture_after_task2 (attachment) - 
# - quality_evaluation2 (string) - 
# - comments_task2 (text) - 
# - task3 (string) - 
# - abnormality3 (string) - 
# - abnormality_desc3 (text) - 
# - abnormality_picture3 (attachment) - 
# - picture_before_task3 (attachment) - 
# - picture_after_task3 (attachment) - 
# - quality_evaluation3 (string) - 
# - comments_task3 (text) - 


class Iforms::TaskInspectionV2Migrate < Iforms::AbstractIformMigrate

  def get_record(item_hash,dir)
    record = Forms::TaskInspection.new
    get_common_answer_values(record,item_hash,"v2")
    
    record.abnormality1 = item_hash["abnormality1"]
    record.abnormality_desc1 = item_hash["abnormality_description_1"]
    record.abnormality_picture1 = create_image_attachment(item_hash,"abnormality_picture_1",dir)
    record.picture_before_task1 = create_image_attachment(item_hash,"picture_before_task1",dir)
    record.picture_after_task1 = create_image_attachment(item_hash,"picture_after_task1",dir)
    record.comments_task1 = item_hash["comments_task_1"]
    record.client = item_hash["client"]
    record.site = item_hash["site"]
    record.shop = item_hash["plant"]
    record.task1 = item_hash["task1"]
    record.inspection_date = item_hash["inspection_date"]
    record.quality_evaluation1  = item_hash["quality_evaluation_1"]
    record.task3 = item_hash["task3"]
    record.task2 = item_hash["task2"]
    record.abnormality2  = item_hash["abnormality2"]
    record.abnormality3 = item_hash["abnormality3"]
    record.abnormality_desc2 = item_hash["abnormality_description_2"]
    record.abnormality_desc3 = item_hash["abnormality_description_3"]
    record.abnormality_picture2 = create_image_attachment(item_hash,"abnormality_picture_2",dir)
    record.abnormality_picture3 = create_image_attachment(item_hash,"abnormality_picture_3",dir)
    record.picture_before_task2 = create_image_attachment(item_hash,"picture_before_task2",dir)
    record.picture_after_task2 = create_image_attachment(item_hash,"picture_after_task2",dir)
    record.picture_before_task3 = create_image_attachment(item_hash,"picture_before_task3",dir)
    record.picture_after_task3 = create_image_attachment(item_hash,"picture_after_task3",dir)
    record.quality_evaluation2 = item_hash["quality_evaluation_2"]
    record.quality_evaluation3 = item_hash["quality_evaluation_3"]
    record.comments_task2  = item_hash["comments_task_2"]
    record.comments_task3 = item_hash["comments_task_3"]
    
    num_task = 0
    num_task += 1 unless record.task1.nil?
    num_task += 1 unless record.task2.nil?
    num_task += 1 unless record.task3.nil?
    
    record.num_tasks = num_task

    
    return record
  end
  
end












