# Parser to for Area Inspection forms submitted from ProntoForms
class ProntoForms::AreaInspectionParser < AbstractFormParser
 
  # name of the form according to ProntoForms
  NAME = "Area Inspection"
  
  # Returns the highest version number this parser is capable of parsing.
  #
  # @return [numeric] highest version number this parser is capable of parsing
  def max_version
    3
  end
  
  # Attempts to convert the hash provided into a database object.
  #
  # @param form_hash [Hash] hash of the form submission
  # @param model [Forms::AreaInspection] object to update, nil if a new object should be created
  # @return [ActiveRecord] instance of the object
  # @raise [ParserException] if the hash could not be parsed for whatever reason
  def parse(form_hash, model = nil)
    # create a new model object if one was not provided
    model ||= Forms::AreaInspection.new
    
    # assign common values
    ProntoForms::SourceParser.get_common_answer_values(form_hash, model)
    
    # page 1
    model.inspection_date     = ProntoForms::SourceParser.get_answer_values(form_hash, 0, 0)[0]
    model.client              = ProntoForms::SourceParser.get_answer_values(form_hash, 0, 1)[0]
    model.site                = ProntoForms::SourceParser.get_answer_values(form_hash, 0, 2)[0]
    model.shop                = ProntoForms::SourceParser.get_answer_values(form_hash, 0, 3)[0]
    
    # page 2
    model.equipment_area_type = ProntoForms::SourceParser.get_answer_values(form_hash, 1, 0)[0]
    model.deck_area           = ProntoForms::SourceParser.get_answer_values(form_hash, 1, 1)[0]
    model.abnormality         = ProntoForms::SourceParser.get_answer_values(form_hash, 1, 2)[0]
    model.comments            = ProntoForms::SourceParser.get_answer_values(form_hash, 1, 3)[0]
    
    # field with multiple images
    ProntoForms::SourceParser.handle_images(model, form_hash, 1, 4, 3, "image")
        
    return model
  end
end