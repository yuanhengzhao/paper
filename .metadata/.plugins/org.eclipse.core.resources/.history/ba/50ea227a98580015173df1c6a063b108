require 'spec_helper'

describe Security::OmniauthCallbacksController do
  
  shared_examples_for "an non robinson email user" do
    
    it "should redirect to home" do
      expect(response).to redirect_to(root_url)
    end
    
    it "should keep the current user nil" do
      expect(controller.current_user).to be(nil)
    end

    it "should redirect to home" do
      expect(response).to redirect_to(root_url)
    end

    it "should have no error messages" do
      expect(flash[:error]).to eq(message_bad_email)
    end

    it "should have an alert message" do
      expect(flash[:alert]).to be_nil
    end

    it "should have a notice message" do
      expect(flash[:notice]).to be_nil
    end
    
  end
  
  
  shared_examples_for "a valid new user" do

    it "should create a user record that is not authorized nor an admin" do
      result = Security::User.find_by_email(omniauth['info']['email'])
      expect(result).to_not be_nil
      expect(result.authorized).to be_false
      expect(result.admin).to be_false
    end

    it "should set the current user to that user" do
      expect(controller.current_user.email).to eq(omniauth['info']['email'])
    end

    it "should redirect to home" do
      expect(response).to redirect_to(root_url)
    end

    it "should have no error messages" do
      expect(flash[:error]).to be_nil
    end

    it "should have an alert message" do
      expect(flash[:alert]).to be_nil
    end

    it "should have a notice message" do
      expect(flash[:notice]).to eq(message_success)
    end
  end

  shared_examples_for "a valid authorized user" do

    it "should set the current user to that user" do
      expect(controller.current_user.email).to eq(omniauth['info']['email'])
    end

    it "should redirect to home" do
      expect(response).to redirect_to(root_url)
    end

    it "should have no error messages" do
      expect(flash[:error]).to be_nil
    end

    it "should have no alert message" do
      expect(flash[:alert]).to be_nil
    end

    it "should have a notice message" do
      expect(flash[:notice]).to eq(message_success)
    end

  end

  describe "google_oauth2" do

    let(:message_success) { "Successfully authenticated from Robinson Google account." }
    let(:message_unauthorized) { "Your account has not yet been authorized by an administrator. Until that time, you will not be able to access this application." }
    let(:message_bad_email) { "Please log into your Robinson Google account" }

    before(:each) do
      controller.request = ActionController::TestRequest.new(:omniauth => omniauth)

      request.env["devise.mapping"] = Devise.mappings[:user]
      request.env["omniauth.auth"] = OmniAuth::AuthHash.new(omniauth)
    end

    describe "for Robinson Solutions email" do

      let(:omniauth) { { 'provider' => 'google_oauth2', 'uid' => '9638521', 'info' => { 'email' => 'user@robinsonsolutions.com' } } }

      describe "for a new user" do
        before(:each) do
        # ensure system has no users before calling method
          expect(Security::User.all).to be_empty
          get :google_oauth2
        end

        it_behaves_like "a valid new user"
      end

      describe "for an authorized user" do

        let(:expected) { create(:user, authorized: true, provider: omniauth['provider'], uid: omniauth['uid'], email: omniauth['info']['email']) }

        before(:each) do
        # ensure there is only one user before calling method
          expect(Security::User.all).to eq([expected])
          get :google_oauth2
        end

        it_behaves_like "a valid authorized user"
      end

    end
    
    # there is not access to gmail users to log in using the google API implemetation
    describe "for Gmail email" do

      let(:omniauth) { { 'provider' => 'google_oauth2', 'uid' => '9638523', 'info' => { 'email' => 'user@gmail.com' } } }

      before(:each) do
      # ensure system has no users before calling method
        expect(Security::User.all).to be_empty
        get :google_oauth2
      end

      it_behaves_like "an non robinson email user"
    end
  end
end

