require 'spec_helper'

describe Devise::SessionsController do
  
  before :each do
    request.env['devise.mapping'] = Devise.mappings[:user]
  end
  
  let!(:external_user) { create(:external_user) }
  # The problem is that Devise is unable to map routes from the test back to the original controller.
  # That means that while your app actually works fine if you open it in the browser, your controller
  # tests will still fail. The solution is to add the devise mapping to the request before each test.

  describe "GET 'new' (Sign in page)" do
    it "should succeed" do
      get :new
      response.should be_success
      response.status.should eq(200)
    end
  end
  
  describe "GET 'destroy' (Sign out)" do

    it "should succeed" do
      sign_in external_user
      
      get :destroy
      expect(response).to redirect_to root_url
      expect(controller.user_signed_in?).to eq(false)
      expect(flash[:notice]).to eq("Signed out successfully.")
    end
    
    it "should fail if the user has not signed in" do
      
      get :destroy
      expect(response).to redirect_to root_url
      expect(controller.user_signed_in?).to eq(false)
    end
  end
  
  describe "POST 'create' (Sign in submitted)" do

    describe "For successful cases" do
      it "should let the user sign in" do
        post :create, { user: { email: external_user.email, password: "secret123" } }
        expect(response).to redirect_to root_url
        expect(flash[:notice]).to eq("Signed in successfully.")
        expect(controller.user_signed_in?).to eq(true)
        expect(controller.current_user.email).to eq(external_user.email)
      end
    end

    describe "For failure cases" do
      describe "For invalid email" do
        it "should give error message if the email is not registered" do
          post :create, { user: { email: "whoever@whatever.com", password: "wrongpassword" } }
          response.should be_success
          expect(response).to render_template("devise/sessions/new")
          expect(flash[:alert]).to eq("Invalid email or password.")
        end
        
        it "should give error message if the email format is not correct" do
          post :create, { user: { email: "not a email", password: "wrongpassword" } }
          response.should be_success
          expect(response).to render_template("devise/sessions/new")
          expect(flash[:alert]).to eq("Invalid email or password.")
        end
      end

      describe "For invalid password" do
        it "should give error message" do
          post :create, { user: { email: external_user.email, password: "wrongpassword" } }
          response.should be_success
          expect(response).to render_template("devise/sessions/new")
          expect(flash[:alert]).to eq("Invalid email or password.")
        end
      end
    end
  end
end