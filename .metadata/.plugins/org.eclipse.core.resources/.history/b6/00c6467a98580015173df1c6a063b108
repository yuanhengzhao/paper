require 'spec_helper'

describe "data_sources/site_shifts/index" do
  let!(:ability) do
    # ability object with no abilities specific abilities
    ability = Object.new
    ability.extend(CanCan::Ability)
    controller.stub(:current_ability) { ability }
    ability
  end
  
  let(:site_shifts) { [ create(:site_shift_sequential), create(:site_shift_sequential) ] }
  
  before(:each) do
    assign(:site_shifts, site_shifts)
  end
  
  context "for readers" do
    before(:each) do
      ability.can :read, DataSources::SiteShift
    end
  
    it "renders attributes in <td>" do
      render
      assert_select "tr>td", :text => site_shifts[0].site, :count => 1
      assert_select "tr>td", :text => site_shifts[0].shift, :count => 1
      assert_select "tr>td", :text => site_shifts[1].site, :count => 1
      assert_select "tr>td", :text => site_shifts[1].shift, :count => 1
    end
    
    it "renders the 'Show' button" do
      render
      expect(render).to match(/Show/)
    end
    
    it "doesn't render the 'Edit' link" do
      render
      expect(render).to_not match(/Edit/)
    end
    
    it "doesn't render the 'Destroy' link" do
      render
      expect(render).to_not match(/Destroy/)
    end
  end
  
  context "for editors" do
    before(:each) do
      ability.can :manage, DataSources::SiteShift
    end
  
    it "renders attributes in <td>" do
      render
      assert_select "tr>td", :text => site_shifts[0].site, :count => 1
      assert_select "tr>td", :text => site_shifts[0].shift, :count => 1
      assert_select "tr>td", :text => site_shifts[1].site, :count => 1
      assert_select "tr>td", :text => site_shifts[1].shift, :count => 1
    end
    
    it "renders the 'Show' button" do
      render
      expect(render).to match(/Show/)
    end
    
    it "renders the 'Edit' button" do
      render
      expect(render).to match(/Edit/)
    end
    
    it "renders the 'Destroy' button" do
      render
      expect(render).to match(/Destroy/)
    end
  end
end