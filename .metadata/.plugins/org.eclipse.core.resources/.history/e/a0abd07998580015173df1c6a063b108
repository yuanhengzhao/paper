class Forms::SocIncidentReportsController < ApplicationController
  
  FORM_NAME = "soc incident reports"
  
  include DatatableServerSideProcessing
  include XlsxReportProcessing
  
  before_action :authenticate_user!
  
  load_and_authorize_resource :except => [:update_export, :download_export, :submission]
  
  rescue_from ActiveRecord::RecordNotFound, with: :record_not_found
  
  add_breadcrumb "forms", :forms_index_path
  add_breadcrumb "soc incident reports", :forms_soc_incident_reports_path
  
  DATATABLES_COLUMNS = [ "id", "username", "device_submit_date" ]
  
  def index
    # @soc_incident_reports is automatically loaded
  end

  def show
    # @soc_incident_report is automatically loaded
    add_breadcrumb "SOC incident report #{@soc_incident_report.id}", :forms_soc_incident_report_path
  end
  
  # Overwrites the model's existing properties with the contents of the original submission document attached.
  def reparse
    # @soc_incident_report is automatically loaded
    result = @soc_incident_report.reparse
    # render the show action associated with the result object
    render action: 'show', location: result
  end
  
  # server-side processing method for jquery datatable
  def datatable
    respond_to do |format|
      format.html { redirect_to forms_soc_incident_reports_url }
      format.json {
        options = {
          :safe_columns => DATATABLES_COLUMNS
        }
        
        # call concern function using collection of all records the user has access to
        @soc_incident_reports = Forms::SocIncidentReport.accessible_by(current_ability)
        render :json => datatable_data(@soc_incident_reports, params, options)
      }
    end
  end
  
  def update_export
    authorize! :read, Forms::SocIncidentReport
    
    begin
      raise "No data in this form."  if Forms::SocIncidentReport.all.count == 0
      @export = generate_xlsx(Forms::SocIncidentReport, FORM_NAME, Forms::SocIncidentReport.maximum("updated_at"))
      respond_to do |format|
        format.json { render :json => @export, status: :ok  }
      end
    rescue => e
      respond_to do |format|
        format.json { render text:e.message, status: :not_acceptable }
      end
    end  
  end
  
  def download_export
    authorize! :read, Forms::SocIncidentReport
    @export = Report::FormExport.find_by(form_name: FORM_NAME)
    redirect_to(@export.attachment.expiring_url(10))
  end

  def submission
    authorize! :read, Forms::SocIncidentReport
    @soc_incident_report = Forms::SocIncidentReport.find(params[:id])
    authorize! :read, @soc_incident_report
    redirect_to(@soc_incident_report.submission.expiring_url(10))
  end

  private
  
  def record_not_found(exception)
    # redirect back to index if id not found
    flash[:alert] = exception.message
    redirect_to forms_soc_incident_reports_path
  end
end
