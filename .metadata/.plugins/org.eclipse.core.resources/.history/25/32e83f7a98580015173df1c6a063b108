require_relative '../../spec_helper'

describe ProntoForms::DollyCleaningParser do
  
  let(:missing_image) { "/assets/missing.jpg" }
  
  describe "version 1" do
    describe "max_version" do
      subject { ProntoForms::DollyCleaningParser.new }
      
      it "should be equal or greater than version 1" do
        expect(subject.max_version).to be >= 1
      end
    end
    
    describe "parse" do
      # call the parse method on a parameter defined in the sub-describes
      subject { ProntoForms::DollyCleaningParser.new.parse(form_hash) }
      
      # ensure that form_hash has been properly set for the specs  
      before(:each) do
        form_hash.should_not be_nil
      end
      
      describe "for a hash missing pages" do
        let(:dolly) { FactoryGirl.create(:dolly) }
        
        let(:form_hash) {
          tmp = FactoryGirl.build(:dolly_cleaning_missing_pages)
          f = open(tmp.submission.queued_for_write[:original].path)
          json = ActiveSupport::JSON.decode(f.read)
        }
        
        it "should throw a parser error" do
          lambda { subject }.should raise_error(ParserException, "Could not find expected page [page: 1]")
        end
        
      end
      
      describe "for a valid hash" do
        
        let!(:expected) { build(:dolly_cleaning_v1) }
        before(:each) { expect(expected.version).to eq("1") }
        
        let!(:dolly) { 
          expected.dolly.save unless expected.dolly.persisted?
          expected.dolly
        }
        
        let!(:form_hash) { 
          f = open(expected.submission.queued_for_write[:original].path)
          json = ActiveSupport::JSON.decode(f.read)
        }
        
        subject { ProntoForms::DollyCleaningParser.new.parse(form_hash) }
        
        it "should return a Forms::DollyCleaning object" do
          subject.should be_a_kind_of(Forms::DollyCleaning)
        end
        
        it "should be valid" do
          expect(subject).to  be_valid
          expect(expected).to be_valid
        end
        
        describe "should match expected" do
          before(:each) do
            subject.save
            subject.reload
          end
          
          it "should have the same base form values" do
            expect(subject).to have_same_base_form_attributes_as(expected)
          end
          
          its("dolly_identifier") { should eq(expected.dolly_identifier) }
          its("dolly") { should eq(expected.dolly) }
          its("time_in") { should eq(expected.time_in) }
          
          its("time_out") { should eq(expected.time_out) }
          its("notes") { should eq(expected.notes) }
        end
      end
    end
  end
  
  describe "version 2" do
    describe "max_version" do
      subject { ProntoForms::DollyCleaningParser.new }
      
      it "should be equal or greater than version 2" do
        expect(subject.max_version).to be >= 2
      end
    end
    
    describe "parse" do
      # call the parse method on a parameter defined in the sub-describes
      subject { ProntoForms::DollyCleaningParser.new.parse(form_hash) }
      
      # ensure that form_hash has been properly set for the specs  
      before(:each) do
        form_hash.should_not be_nil
      end
      
      describe "for a hash missing pages" do
        let(:dolly) { FactoryGirl.create(:dolly) }
        
        let(:form_hash) {
          tmp = FactoryGirl.build(:dolly_cleaning_missing_pages)
          f = open(tmp.submission.queued_for_write[:original].path)
          json = ActiveSupport::JSON.decode(f.read)
        }
        
        it "should throw a parser error" do
          lambda { subject }.should raise_error(ParserException, "Could not find expected page [page: 1]")
        end
        
      end
      
      describe "for a valid hash" do
        
        let!(:expected) { build(:dolly_cleaning_v2) }
        before(:each) { expect(expected.version).to eq("2") }
        
        let!(:dolly) { 
          expected.dolly.save unless expected.dolly.persisted?
          expected.dolly
        }
        
        let!(:form_hash) { 
          f = open(expected.submission.queued_for_write[:original].path)
          json = ActiveSupport::JSON.decode(f.read)
        }
        
        subject { ProntoForms::DollyCleaningParser.new.parse(form_hash) }
        
        it "should return a Forms::DollyCleaning object" do
          subject.should be_a_kind_of(Forms::DollyCleaning)
        end
        
        it "should be valid" do
          expect(subject).to  be_valid
          expect(expected).to be_valid
        end
        
        describe "should match expected" do
          before(:each) do
            subject.save
            subject.reload
          end
          
          it "should have the same base form values" do
            expect(subject).to have_same_base_form_attributes_as(expected)
          end
          
          its("dolly_identifier") { should eq(expected.dolly_identifier) }
          its("dolly") { should eq(expected.dolly) }
          its("time_in") { should eq(expected.time_in) }
          
          its("time_out") { should eq(expected.time_out) }
          its("notes") { should eq(expected.notes) }
        end
      end
    end
  end
end