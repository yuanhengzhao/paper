class DataSources::CustomerSitesController < ApplicationController

  include DatatableServerSideProcessing
  DATATABLES_COLUMNS = [ "id", "site", "shift" ]
  
  before_action :authenticate_user!

  load_and_authorize_resource

  before_action :set_data_sources_customer_site, only: [:edit, :update, :destroy]

  rescue_from ActiveRecord::RecordNotFound, with: :record_not_found

  add_breadcrumb "data sources", :data_sources_index_path
  add_breadcrumb "customer sites", :data_sources_customer_sites_path
  
  # GET /data_sources/customer_sites
  # GET /data_sources/customer_sites.json
  def index
    # @customer_sites is automatically loaded
  end

  # GET /data_sources/customer_sites/1
  # GET /data_sources/customer_sites/1.json
  def show
    # @customer_site is automatically loaded
    add_breadcrumb "customer site #{@customer_site.id}", :data_sources_customer_site_path
  end

  # GET /data_sources/customer_sites/new
  def new
    # blank @customer_site is automatically loaded
  end

  # GET /data_sources/customer_sites/1/edit
  def edit
    add_breadcrumb "customer site #{@customer_site.id}", :data_sources_customer_site_path
  end

  # POST /data_sources/customer_sites
  # POST /data_sources/customer_sites.json
  def create
    @customer_site = DataSources::CustomerSite.new(data_sources_customer_site_params)

    respond_to do |format|
      if @customer_site.save
        format.html { redirect_to @customer_site, notice: 'Site shift was successfully created.' }
        format.json { render action: 'show', status: :created, location: @customer_site }
      else
        format.html { render action: 'new' }
        format.json { render json: @customer_site.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /data_sources/customer_sites/1
  # PATCH/PUT /data_sources/customer_sites/1.json
  def update
    respond_to do |format|
      if @customer_site.update(data_sources_customer_site_params)
        format.html { redirect_to @customer_site, notice: 'Site shift was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: 'edit' }
        format.json { render json: @customer_site.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /data_sources/customer_sites/1
  # DELETE /data_sources/customer_sites/1.json
  def destroy
    @customer_site.destroy
    respond_to do |format|
      format.html { redirect_to data_sources_customer_sites_url }
      format.json { head :no_content }
    end
  end
    
  # server-side processing method for jquery datatable
  def datatable
    respond_to do |format|
      format.html { redirect_to data_sources_customer_sites_url }
      format.json {
        options = {
          :safe_columns => DATATABLES_COLUMNS
        }
        
        # call concern function using collection of all records the user has access to
        @customer_sites = DataSources::CustomerSite.accessible_by(current_ability)
        render :json => datatable_data(@customer_sites, params, options)
      }
    end
  end

  private

  # Use callbacks to share common setup or constraints between actions.
  def set_data_sources_customer_site
    @customer_site = DataSources::CustomerSite.find(params[:id])
  end

  # Never trust parameters from the scary internet, only allow the white list through.
  def data_sources_customer_site_params
    params.require(:customer_site).permit(:company, :customer, :site, :shop)
  end
  
  # callback when no record matches the id provided
  def record_not_found(exception)
    respond_to do |format|
      format.html {
        flash[:alert] = exception.message
        redirect_to data_sources_customer_sites_path
      }
      format.any { raise ActiveRecord::RecordNotFound }
    end
  end
end
