require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Admin::OptionsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Option. As you add validations to Option, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:option)
  }

  let(:invalid_attributes) {
    {group: nil,
     value: nil
     }
  }
  
  let(:new_attributes) {
    {group: "body_location",
     value: "hair" }
  }
  
  let(:valid_group) {
    "body_location"
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # OptionsController. Be sure to keep this updated too.

  describe "GET #index" do
    subject { get :index, {:group =>valid_group} }
    let(:option) { FactoryGirl.create(:option) }
    
    before(:each) do
      login_user(user) unless user.nil?
    end
    
    describe "for an anonymous user" do
      let(:user) { nil }
      
      it "should redirect to sign in page" do
        subject
        expect(response).to redirect_to(new_user_session_url)
      end
    end
    
    describe "for a regular user" do
      let(:user) {FactoryGirl.create(:user)}
      
      it "should error" do 
        expect{
          subject
        }.to raise_error(CanCan::AccessDenied)
      end
    end
    
    describe "for a reader user" do
      let(:user){FactoryGirl.create(:reader) }
      
      it "assigns the requested o as @options" do 
        subject 
        expect(assigns(:options)).to eq([option])
      end
    end
    
    describe "for a safety coordinator user" do
      let(:user) {FactoryGirl.create(:safety_coordinator) }
      
      it "assigns the requested option as @option" do
        subject
        expect(assigns(:options)).to eq([option])
      end
    end
    
    describe "for an admin user" do
      let(:user) { FactoryGirl.create(:admin) }
      
      it "assigns the requested option as @option" do
        subject
        expect(assigns(:options)).to eq([option])
      end
    end
  end

  describe "GET #show" do 
    let(:option) {FactoryGirl.create(:option) }
    subject {get :show, {:group => option.group, :id => option.to_param}}
    
    before(:each)do
      login_user(user) unless user.nil?
    end
    
    describe "for an anonymous user" do
      let(:user) {nil}
      
      it "should redirect to sign in page" do 
        subject
        expect(response).to redirect_to(new_user_session_url)
      end
    end
    
    describe "for a regular user" do
      let(:user) {FactoryGirl.create(:user) }
      
      it "should error" do 
        expect {
          subject
        }.to raise_error(CanCan::AccessDenied)
      end
    end
    
    describe "for a reader user" do
      let(:user) { FactoryGirl.create(:reader) }
      
      it "assigns the requested option as @option" do
        subject
        expect(assigns(:option)).to eq(option)
      end
    end
    
    describe "for a safety coordinator user" do
      let(:user) { FactoryGirl.create(:safety_coordinator) }
      
      it "assigns the requested option as @option" do
        subject
        expect(assigns(:option)).to eq(option)
      end
    end
    
    describe "for a safety director user" do
      let(:user) { FactoryGirl.create(:safety_director) }
      
      it "assigns the requested option as @option" do
        subject
        expect(assigns(:option)).to eq(option)
      end
    end
    
    describe "for an admin user" do
      let(:user) { FactoryGirl.create(:admin) }
      
      it "assigns the requested option as @option" do
        subject
        expect(assigns(:option)).to eq(option)
      end
    end
  end
    
  describe "GET #new" do
    
    subject { get :new, {:group=> valid_attributes[:group]} }
    
    before(:each) do
      login_user(user) unless user.nil?
    end
    
    describe "for an anonymous user" do
      let(:user) {nil}
      
      it "should redirect to sign in page" do
        subject
        expect(response).to redirect_to(new_user_session_url)
      end
    end
    
    describe "for a regular user" do
      let(:user) {FactoryGirl.create(:user)}
      
      it "should error" do
        expect {
          subject
        }.to raise_error(CanCan::AccessDenied)
      end
    end
     describe "for a reader user" do
       let(:user) {FactoryGirl.create(:reader) }
       
       it "should error" do
         expect{
           subject
         }.to raise_error(CanCan::AccessDenied)
       end
     end
     
     describe "for a safety coordinator user" do
       let(:user) {FactoryGirl.create(:safety_coordinator)}
       
       it "should error" do
         expect {
           subject
         }.to raise_error(CanCan::AccessDenied)
       end
     end
       
     describe "for a safty dirctor user" do
       let(:user){FactoryGirl.create(:safety_director) }
       
       it "should error" do
         expect {
           subject
         }.to raise_error(CanCan::AccessDenied)
       end
     end 
     
     describe "for an admin user" do
       let(:user) {FactoryGirl.create(:admin) }
       it "assigns a new option as @option" do
         get :new, {:group => :"body_location"}
         
       expect(assigns(:option)).to be_a_new(Option)
       end
     end  
   end
     
  describe "GET #edit" do
    let(:option) { FactoryGirl.create(:option) }
    subject { get :edit, {:group => option.group, :id => option.to_param} }
    
    # log in the user if one is set
    before(:each) do
      login_user(user) unless user.nil?
    end
    describe "for an anonymous user" do
      let(:user) { nil }
      
      it "should redirect to sign in page" do
        subject
        expect(response).to redirect_to(new_user_session_url)
      end
    end
    
    describe "for a regular user" do
      let(:user) { FactoryGirl.create(:user) }
      
      it "should error" do
        expect {
          subject
        }.to raise_error(CanCan::AccessDenied)
      end
    end
    
    describe "for a reader user" do
      let(:user) { FactoryGirl.create(:reader) }
      
      it "should error" do
        expect {
          subject
        }.to raise_error(CanCan::AccessDenied)
      end
    end
    
   describe "for a safety coordinator user" do
      let(:user) { FactoryGirl.create(:safety_coordinator) }
      
      it "should error" do
        expect {
          subject
        }.to raise_error(CanCan::AccessDenied)
      end
    end
    
    describe "for a safety director user" do
      let(:user) { FactoryGirl.create(:safety_director) }
      
      it "should error" do
        expect {
          subject
        }.to raise_error(CanCan::AccessDenied)
      end
    end
    
    describe "for an admin user" do
      let(:user) { FactoryGirl.create(:admin) }
      
      it "assigns the requested option as @option" do
        subject
        expect(assigns(:option)).to eq(option)
      end
    end
  end

  describe "POST #create" do
    subject { post :create,  {:group => valid_group, :option => create_attributes } }
    
    before(:each) do
     login_user(user) unless user.nil?
    end
    
    describe "for an anonymous user" do
      let(:user) { nil }
       
      describe "with valid params" do
        let(:create_attributes) { valid_attributes }
        
        it "redirect to sign in page" do
          subject
          expect(response).to redirect_to(new_user_session_url)
        end
      end
      
      describe "with invalid params" do
        let(:create_attributes) { invalid_attributes }
        
        it "redirect to sign in page" do
          subject
          expect(response).to redirect_to(new_user_session_url)
        end
      end
    end
    
    describe "for a regular user" do
      let(:user) { FactoryGirl.create(:user) }
        
        describe "with valid params" do
        let(:create_attributes) { valid_attributes }
        
        it "should error" do
          expect {
            subject
          }.to raise_error(CanCan::AccessDenied)
        end
      end
      
      describe "with invalid params" do
        let(:create_attributes) { invalid_attributes }
        
        it "should error" do
          expect {
            subject
          }.to raise_error(CanCan::AccessDenied)
        end
      end
    end
    
    describe "for a reader user" do
      let(:user) { FactoryGirl.create(:reader) }
        
      describe "with valid params" do
        let(:create_attributes) { valid_attributes }
        
        it "should error" do
          expect {
            subject
          }.to raise_error(CanCan::AccessDenied)
        end
      end
      
      describe "with invalid params" do
        let(:create_attributes) { invalid_attributes }
        
        it "should error" do
          expect {
            subject
          }.to raise_error(CanCan::AccessDenied)
        end
      end
    end
    
    describe "for a safety coordinator user" do
      let(:user) { FactoryGirl.create(:safety_coordinator) }
      
      describe "with valid params" do
        let(:create_attributes) { valid_attributes }
        
        it "should error" do
          expect {
            subject
          }.to raise_error(CanCan::AccessDenied)
        end
      end
      
      describe "with invalid params" do
        let(:create_attributes) { invalid_attributes }
        
        it "should error" do
          expect {
            subject
          }.to raise_error(CanCan::AccessDenied)
        end
      end
    end
    
    describe "for a safety director user" do
      let(:user) { FactoryGirl.create(:safety_director) }
      
      describe "with valid params" do
        let(:create_attributes) { valid_attributes }
        
        it "should error" do
          expect {
            subject
          }.to raise_error(CanCan::AccessDenied)
        end
      end
      
      describe "with invalid params" do
        let(:create_attributes) { invalid_attributes }
        
        it "should error" do
          expect {
            subject
          }.to raise_error(CanCan::AccessDenied)
        end
      end
    end    
    
    describe "for an admin user" do
      let(:user) { FactoryGirl.create(:admin) }
      
      describe "with valid params" do
        let(:create_attributes) { valid_attributes }
        
        it "creates a new option" do
          expect {
            subject
          }.to change(Option, :count).by(1)
        end
   
        it "assigns a newly created option as @option" do
          subject
          expect(assigns(:option)).to be_a(Option)
          expect(assigns(:option)).to be_persisted
        end
  
        it "redirects to the created option" do
          subject
          option = Option.last
          expect(response).to redirect_to(admin_show_option_url({:group=>option.group, :id=>option.id}))
        end
      end

      describe "with invalid params" do
        let(:create_attributes) { invalid_attributes }
        
        it "assigns a newly created but unsaved option as @option" do
          subject
          expect(assigns(:option)).to be_a_new(Option)
        end
  
        it "re-renders the 'new' template" do 
          subject
          expect(response).to render_template("new")
        end
      end
    end
  end
    
  describe "PUT #update" do
    
    let(:option) {FactoryGirl.create(:option) }
    subject { put :update, {:group => option.group, :id => option.to_param, :option=> update_attributes}}
    
    before(:each) do
      login_user(user) unless user.nil?
    end
    
    describe "for an anonymous user" do
      let(:user) { nil} 
        
      describe "with valid params" do
        let(:update_attributes) { new_attributes }
        
        it "redirect to sign in page" do
          subject
          expect(response).to redirect_to(new_user_session_url)
        end
      end
      
      describe "with invalid params" do
        let(:update_attributes) { invalid_attributes }
        
        it "redirect to sign in page" do
          subject
          expect(response).to redirect_to(new_user_session_url)
        end
      end
    end
    
    describe "for a regular user" do
      let(:user) { FactoryGirl.create(:user) }
      
      describe "with valid params" do
        let(:update_attributes) { valid_attributes }
        
        it "should error" do
          expect {
            subject
          }.to raise_error(CanCan::AccessDenied)
        end
      end
      
      describe "with invalid params" do
        let(:update_attributes) { invalid_attributes }
        
        it "should error" do
          expect {
            subject
          }.to raise_error(CanCan::AccessDenied)
        end
      end
    end
    
    describe "for a safety coordinator user" do
      let(:user) {FactoryGirl.create(:safety_coordinator)}
      
      describe "with valid params" do
        let(:update_attributes) { valid_attributes }
        
        it "should error" do
          expect {
            subject
          }.to raise_error(CanCan::AccessDenied)
        end
      end
      
      describe "with invalid params" do
        let(:update_attributes) { invalid_attributes }
        
        it "should error" do
          expect {
            subject
          }.to raise_error(CanCan::AccessDenied)
        end
      end
    end
    
    describe "for a safety director user" do
      let(:user) {FactoryGirl.create(:safety_director)}
      
      describe "with valid params" do
        let(:update_attributes) { valid_attributes }
        
        it "should error" do
          expect {
            subject
          }.to raise_error(CanCan::AccessDenied)
        end
      end
      
      describe "with invalid params" do
        let(:update_attributes) { invalid_attributes }
        
        it "should error" do
          expect {
            subject
          }.to raise_error(CanCan::AccessDenied)
        end
      end
    end
    
    describe "for an admin user" do
      let(:user) { FactoryGirl.create(:admin) }
      
      describe "with valid params" do
        let(:update_attributes) { new_attributes }
        
        it "updates the requested option" do
          subject
          option.reload
          expect(option.group).to eq(new_attributes[:group])
          expect(option.value).to eq(new_attributes[:value])
        end
        
        it "assigns the requested option as @option" do
          subject
          expect(assigns(:option)).to eq(option)
        end
        
        it "redirectes to the option" do
          subject
          expect(response).to redirect_to(admin_show_option_url(option.group))
        end
      end
      
      describe "with invalid params" do
        let(:update_attributes) { invalid_attributes }
        
        it "assigns the option as @option" do
          subject
          expect(assigns(:option)).to eq(option)          
        end
        
        it "re-renders the 'edit' template" do
          subject
          expect(response).to render_template("edit")
        end
      end
    end
  end
  
  describe "DELETE #destroy" do
    
    let!(:option) { FactoryGirl.create(:option) }
    subject { delete :destroy, {:group => option.group, :id => option.to_param} }
    
    before(:each) do
      login_user(user) unless user.nil?
    end
    
    describe "for an anonymous user" do
      let(:user) { nil }
      
      it "should redirect to sign in page" do
        subject
        expect(response).to redirect_to(new_user_session_url)
      end
    end
    
    describe "for a regular user" do
      let(:user) { FactoryGirl.create(:user) }
      
      it "should error" do
        expect {
          subject
        }.to raise_error(CanCan::AccessDenied)
      end
    end
    
    describe "for a reader user" do
      let(:user) { FactoryGirl.create(:reader) }
      
      it "should error" do
        expect {
          subject
        }.to raise_error(CanCan::AccessDenied)
      end
    end
    
    describe "for a safety coordinator user" do
      let(:user) { FactoryGirl.create(:safety_coordinator) }
      
      it "should error" do
        expect {
          subject
        }.to raise_error(CanCan::AccessDenied)
      end
    end
    
    describe "for a safety director user" do
      let(:user) { FactoryGirl.create(:safety_director) }
      
      it "should error" do
        expect {
          subject
        }.to raise_error(CanCan::AccessDenied)
      end
    end
    
    describe "for an admin user" do
      let(:user) { FactoryGirl.create(:admin) }
      
      it "destroys the requested option" do
        expect {
          subject
        }.to change(Option, :count).by(-1)
      end
  
      it "redirects to the options list" do
        subject
        expect(response).to redirect_to(admin_options_url)
      end
    end
  end
end