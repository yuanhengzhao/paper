require_relative '../../spec_helper'

describe ProntoForms::EnpsReportParser do

  let(:missing_image) { "/assets/missing.jpg" }

  subject { ProntoForms::EnpsReportParser.new }

  it "should have a NAME constant with the expected value" do
    ProntoForms::EnpsReportParser::NAME.should eq("eNPS")
  end

  describe "max_version" do
    subject { ProntoForms::EnpsReportParser.new }
    
    it "should not throw an error" do
      lambda { subject.max_version }.should_not raise_error
    end
    
    it "should accept version 3" do
      expect(subject.max_version).to be >= 3
    end
  end

  describe "parse" do

    # call the parse method on a parameter defined in the sub-describes
    subject { ProntoForms::EnpsReportParser.new.parse(form_hash) }

    # ensure that form_hash has been properly set for the specs
    before(:each) do
      form_hash.should_not be_nil
    end

    describe "for a hash missing pages" do

      let(:form_hash) {
        f = Rails.root.join('spec', 'resources', 'forms', 'enps_report', 'v3', 'missing_pages.json')
        return ActiveSupport::JSON.decode(f.read)
      }

      it "should throw a parser error" do
        lambda { subject }.should raise_error(ParserException, "Could not find expected page [page: 3]")
      end

    end

    describe "for a valid hash" do

      let(:form_hash) {
        f = Rails.root.join('spec', 'resources', 'forms', 'enps_report', 'v3', 'valid.json')
        return ActiveSupport::JSON.decode(f.read)
      }

      let(:expected) {
          o = Forms::EnpsReport.new
          
          o.reference_number = "20150626-1824192204"
          o.server_receive_date = "2015-06-26T09:09:19-04:00"
          o.device_submit_date = "2015-06-26T09:09:17-04:00"
          o.username = "nshakoori@robinsonsolutions.com"
          o.version = "3"
          o.altitude = "110.831"
          o.latitude = "43.65207789988627"
          o.longitude = "-79.38204648724195"
          o.source = "prontoforms"

          o.qr_code = "10001~Toronto"
          o.site = "Toronto"
          o.shop = "Human Resources"
          o.question1 = "7"
          o.question2 = "Testing for specs "
          o.employee = "Naeimeh Shakoori"
          o.exclude = "false"
          
          return o
      }

      it "should return a Forms::EnpsReport object" do
        subject.should be_a_kind_of(Forms::EnpsReport)
      end
      
      it "should be valid" do
        expect(subject).to be_valid
        expect(expected).to be_valid
      end

      describe "should match expected" do

        before(:each) do
          subject.save
          subject.reload
        end

        it "should have the same base form values" do
          expect(subject).to have_same_base_form_attributes_as(expected)
        end

        it "should have the same values as expected" do          
          subject.qr_code.should eq(expected.qr_code)
          subject.site.should eq(expected.site)
          subject.shop.should eq(expected.shop)
          subject.question1.should eq(expected.question1)
          subject.question2.should eq(expected.question2)
          subject.employee.should eq(expected.employee)
          subject.exclude.should eq(expected.exclude)
        end
      end
    end

  end

end