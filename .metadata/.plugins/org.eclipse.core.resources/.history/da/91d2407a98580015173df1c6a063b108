require_relative '../../spec_helper'

describe ProntoForms::EscrubKopParser do

  let(:missing_image) { "/assets/missing.jpg" }

  describe "max_version" do
    subject { ProntoForms::EscrubKopParser.new }
    it "should not throw an error" do
      lambda { subject.max_version }.should_not raise_error
    end
  end

  describe "parse" do

  # call the parse method on a parameter defined in the sub-describes
    subject { ProntoForms::EscrubKopParser.new.parse(form_hash) }

    # ensure that form_hash has been properly set for the specs
    before(:each) do
      form_hash.should_not be_nil
    end

    describe "for a hash missing pages" do

      let(:form_hash) {
        f = Rails.root.join('spec', 'resources', 'forms', 'escrub_kop', 'missing_pages.json')
        return ActiveSupport::JSON.decode(f.read)
      }

      it "should throw a parser error" do
        lambda { subject }.should raise_error(ParserException, "Could not find expected page [page: 1]")
      end

    end
    
    describe "for a valid hash" do

      let(:form_hash) {
        f = Rails.root.join('spec', 'resources', 'forms', 'escrub_kop', 'valid_key_operating_parameters_v2.json')
        return ActiveSupport::JSON.decode(f.read)
      }

      describe "for valid input" do
        let(:expected) {
          o = Forms::EscrubKop.new

          o.reference_number = "20150505180641-1822072288"
          o.server_receive_date = "2015-05-05T14:06:42-04:00"
          o.device_submit_date = "2015-05-05T14:06:37-04:00"
          o.username = "mliao@robinsonsolutions.com"
          o.version = "2"
          o.altitude = 0.0,
          o.latitude = 43.652189900000003
          o.longitude = -79.382138900000001
          o.source = "prontoforms"

          o.date = "2015-05-05"
          o.time = "14:05:00-04:00"
          o.crew = "A1"
          o.shift = "Night"
          o.check_list = "Key Operating Parameters"
          
          o.bc_sludge = 66
          o.bc_sludge_stick_test = 'Good'
          o.bc_supply_mtr11 = 33
          o.bc_supply_mtr21 = 33
          o.bc_supply_mtr31 = 44
          o.bc_flow_rate_em0104 = 55
          o.bc_flow_rate_em0508 = 66
          o.cc_sludge = 77
          o.cc_sludge_stick_test = 'Sticky'
          o.cc_supply_mtr11 = 11
          o.cc_supply_mtr21 = 21
          o.cc_supply_mtr31 = 31
          o.cc_flow_rate_em0104 = 41
          o.cc_flow_rate_em0508 = 51
          o.operating_comments = 'hello'
        
          return o
        }

        subject {
          o = ProntoForms::EscrubKopParser.new.parse(form_hash)
          #puts o.to_json
          return o
        }

        it "should return a Forms::EscrubKop object" do
          subject.should be_a_kind_of(Forms::EscrubKop)
        end
        
        it "should be valid" do
          expect(subject).to  be_valid
          expect(expected).to be_valid
        end
        
        describe "should match expected" do

          before(:each) do
            subject.save
            subject.reload
          end

          it "should have the same base form values" do
            expect(subject).to have_same_base_form_attributes_as(expected)
          end

          its("date") { should eq(expected.date) }
          its("time") { should eq(expected.time) }
          its("crew") { should eq(expected.crew) }
          its("shift") { should eq(expected.shift) }
          its("check_list") { should eq(expected.check_list) }
          
          its("cc_sludge") { should eq(expected.cc_sludge) }
          its("cc_sludge_stick_test") { should eq(expected.cc_sludge_stick_test) }
          its("cc_supply_mtr11") { should eq(expected.cc_supply_mtr11) }
          its("cc_supply_mtr21") { should eq(expected.cc_supply_mtr21) }
          its("cc_supply_mtr31") { should eq(expected.cc_supply_mtr31) }
          its("cc_flow_rate_em0104") { should eq(expected.cc_flow_rate_em0104) }
          its("cc_flow_rate_em0508") { should eq(expected.cc_flow_rate_em0508) }
          
          its("bc_sludge") { should eq(expected.bc_sludge) }
          its("bc_sludge_stick_test") { should eq(expected.bc_sludge_stick_test) }
          its("bc_supply_mtr11") { should eq(expected.bc_supply_mtr11) }
          its("bc_supply_mtr21") { should eq(expected.bc_supply_mtr21) }
          its("bc_supply_mtr31") { should eq(expected.bc_supply_mtr31) }
          its("bc_flow_rate_em0104") { should eq(expected.bc_flow_rate_em0104) }
          its("bc_flow_rate_em0508") { should eq(expected.bc_flow_rate_em0508) }
          
          its("operating_comments") { should eq(expected.operating_comments) }
        end
      end
    end
  end
end