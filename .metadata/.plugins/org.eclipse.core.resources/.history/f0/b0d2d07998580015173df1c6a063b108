class Forms::SparePartsReportsController < ApplicationController
  
  FORM_NAME = "spare parts reports"
  
  include DatatableServerSideProcessing
  include XlsxReportProcessing
  
  before_action :authenticate_user!
  
  load_and_authorize_resource :except => [:image1, :image2, :image3, :image4, :image5, :image6, :image7, :image8, :update_export, :download_export, :submission]
  
  rescue_from ActiveRecord::RecordNotFound, with: :record_not_found
  
  add_breadcrumb "forms", :forms_index_path
  add_breadcrumb "spare parts report", :forms_spare_parts_reports_path
  
  DATATABLES_COLUMNS = [ "id", "username", "device_submit_date" ]
  
  def index
    # @spare_parts_reports is automatically loaded
  end

  def show
    # @spare_parts_report is automatically loaded
    add_breadcrumb "spare parts report #{@spare_parts_report.id}", :forms_spare_parts_report_path
  end
  
  # Overwrites the model's existing properties with the contents of the original submission document attached.
  def reparse
    # @spare_parts_report is automatically loaded
    result = @spare_parts_report.reparse
    # render the show action associated with the result object
    render action: 'show', location: result
  end
  
  # server-side processing method for jquery datatable
  def datatable
    respond_to do |format|
      format.html { redirect_to forms_spare_parts_reports_url }
      format.json {
        options = {
          :safe_columns => DATATABLES_COLUMNS
        }
        
        # call concern function using collection of all records the user has access to
        @spare_parts_reports = Forms::SparePartsReport.accessible_by(current_ability)
        render :json => datatable_data(@spare_parts_reports, params, options)
      }
    end
  end

  def update_export
    authorize! :read, Forms::SparePartsReport
    
    begin
      raise "No data in this form."  if Forms::SparePartsReport.all.count == 0
      @export = generate_xlsx(Forms::SparePartsReport, FORM_NAME, Forms::SparePartsReport.maximum("updated_at"))
      respond_to do |format|
        format.json { render :json => @export, status: :ok  }
      end
    rescue => e
      respond_to do |format|
        format.json { render text:e.message, status: :not_acceptable }
      end
    end  
  end
  
  def download_export
    authorize! :read, Forms::SparePartsReport
    @export = Report::FormExport.find_by(form_name: FORM_NAME)
    redirect_to(@export.attachment.expiring_url(10))
  end
  
  def image1
    authorize! :read, Forms::SparePartsReport
    @spare_parts_report = Forms::SparePartsReport.find(params[:id])
    authorize! :read, @spare_parts_report
    redirect_to(@spare_parts_report.image1.expiring_url(10))
  end

  def image2
    authorize! :read, Forms::SparePartsReport
    @spare_parts_report = Forms::SparePartsReport.find(params[:id])
    authorize! :read, @spare_parts_report
    redirect_to(@spare_parts_report.image2.expiring_url(10))
  end
  
  def image3
    authorize! :read, Forms::SparePartsReport
    @spare_parts_report = Forms::SparePartsReport.find(params[:id])
    authorize! :read, @spare_parts_report
    redirect_to(@spare_parts_report.image3.expiring_url(10))
  end

  def image4
    authorize! :read, Forms::SparePartsReport
    @spare_parts_report = Forms::SparePartsReport.find(params[:id])
    authorize! :read, @spare_parts_report
    redirect_to(@spare_parts_report.image4.expiring_url(10))
  end
  
  def image5
    authorize! :read, Forms::SparePartsReport
    @spare_parts_report = Forms::SparePartsReport.find(params[:id])
    authorize! :read, @spare_parts_report
    redirect_to(@spare_parts_report.image5.expiring_url(10))
  end
  
  def image6
    authorize! :read, Forms::SparePartsReport
    @spare_parts_report = Forms::SparePartsReport.find(params[:id])
    authorize! :read, @spare_parts_report
    redirect_to(@spare_parts_report.image6.expiring_url(10))
  end
  
  def image7
    authorize! :read, Forms::SparePartsReport
    @spare_parts_report = Forms::SparePartsReport.find(params[:id])
    authorize! :read, @spare_parts_report
    redirect_to(@spare_parts_report.image7.expiring_url(10))
  end
  
  def image8
    authorize! :read, Forms::SparePartsReport
    @spare_parts_report = Forms::SparePartsReport.find(params[:id])
    authorize! :read, @spare_parts_report
    redirect_to(@spare_parts_report.image8.expiring_url(10))
  end

  def submission
    authorize! :read, Forms::SparePartsReport
    @spare_parts_report = Forms::SparePartsReport.find(params[:id])
    authorize! :read, @spare_parts_report
    redirect_to(@spare_parts_report.submission.expiring_url(10))
  end

  private
  
  def record_not_found(exception)
    # redirect back to index if id not found
    flash[:alert] = exception.message
    redirect_to forms_spare_parts_reports_path
  end
end
