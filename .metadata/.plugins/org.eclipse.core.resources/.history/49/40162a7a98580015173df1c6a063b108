require_relative '../../spec_helper'

describe Forms::JigCleaning do
  it "should be included in Forms.list" do
    expect(Forms.list).to include described_class
  end

  it "has a valid factory" do
    expect(build(:jig_cleaning)).to be_valid
  end

  it_behaves_like "reparseable"

  describe "create_normalized_record" do
    
    describe "form with all types of records" do
      let!(:form) {
        o = Forms::JigCleaning.new
  
        o.reference_number = "20150223-1819480105"
        o.server_receive_date = "2015-02-23T16:34:09Z"
        o.device_submit_date = "2015-02-23T11:34:07-05:00"
        o.username = "nshakoori@robinsonsolutions.com"
        o.version = "1"
        o.altitude = 119.589
        o.latitude = "43.65185745995831"
        o.longitude = "-79.38219171956123"
        o.source = "prontoforms"
  
        o.machine                 = "2"
        o.time_in                 = "2015-02-23T11:33:27-05:00"
        o.time_out                = "2015-02-23T11:34:04-05:00"
        o.extra_time              = 10.0
        o.cycle                   = 12.50
  
        o.count_rear_door         = 587
        o.notes_rear_door         = "Bvxg"
  
        o.count_front_door        = 4
        o.notes_front_door        = "fr"
  
        o.count_kickstand_left    = 65
        o.count_kickstand_right   = 25
        o.notes_kickstand         = "ki"
  
        o.count_hood_lifter       = 3
        o.notes_hood_lifter       = "hood"
  
        o.count_weld              = 56
        o.notes_weld              = "weld"
  
        o.count_luggage_hook      = 1
        o.notes_luggage_hook      = "hook"
  
        o.count_fuel_lid          = 12
        o.notes_fuel_lid          = "lid"
  
        o.save!
        
        return o
      }
  
      it "should create corresponding nomalized jig cleaning records" do
        expect(FormExtensions::JigCleaningRecord.count).to eq(8)
        expect(form.jig_cleaning_records.count).to eq(8)
      end
      
      it "should create a rear door record" do
        r = FormExtensions::JigCleaningRecord.where(jig_type:"Rear Door").first
        expect(r.count).to eq(587)
        expect(r.extra_time).to eq(10.0)
        expect(r.notes).to eq("Bvxg")
        expect(r.machine).to eq("2")
        expect(r.side).to eq("N/A")
        expect(r.time_in).to eq("2015-02-23T11:33:27-05:00")
        expect(r.time_out).to eq("2015-02-23T11:34:04-05:00")
        expect(r.cycle).to eq(12.50)
      end
      
      it "should create a front door record" do
        r = FormExtensions::JigCleaningRecord.where(jig_type:"Front Door").first
        expect(r.count).to eq(4)
        expect(r.extra_time).to eq(10.0)
        expect(r.notes).to eq("fr")
        expect(r.machine).to eq("2")
        expect(r.side).to eq("N/A")
        expect(r.time_in).to eq("2015-02-23T11:33:27-05:00")
        expect(r.time_out).to eq("2015-02-23T11:34:04-05:00")
        expect(r.cycle).to eq(12.50)
      end
      
      it "should create a kickstand left" do
        r = FormExtensions::JigCleaningRecord.where(jig_type:"Kickstand").first
        expect(r.count).to eq(65)
        expect(r.extra_time).to eq(10.0)
        expect(r.notes).to eq("ki")
        expect(r.machine).to eq("2")
        expect(r.side).to eq("L")
        expect(r.time_in).to eq("2015-02-23T11:33:27-05:00")
        expect(r.time_out).to eq("2015-02-23T11:34:04-05:00")
        expect(r.cycle).to eq(12.50)
      end
      
      it "should create a kickstand right" do
        r = FormExtensions::JigCleaningRecord.where(jig_type:"Kickstand").second
        expect(r.count).to eq(25)
        expect(r.extra_time).to eq(10.0)
        expect(r.notes).to eq("ki")
        expect(r.machine).to eq("2")
        expect(r.side).to eq("R")
        expect(r.time_in).to eq("2015-02-23T11:33:27-05:00")
        expect(r.time_out).to eq("2015-02-23T11:34:04-05:00")
        expect(r.cycle).to eq(12.50)
      end
      
      it "should create a hood record" do
        r = FormExtensions::JigCleaningRecord.where(jig_type:"Hood Lifter").first
        expect(r.count).to eq(3)
        expect(r.extra_time).to eq(10.0)
        expect(r.notes).to eq("hood")
        expect(r.machine).to eq("2")
        expect(r.side).to eq("N/A")
        expect(r.time_in).to eq("2015-02-23T11:33:27-05:00")
        expect(r.time_out).to eq("2015-02-23T11:34:04-05:00")
        expect(r.cycle).to eq(12.50)
      end
      
      it "should create a weld record" do
        r = FormExtensions::JigCleaningRecord.where(jig_type:"Weld").first
        expect(r.count).to eq(56)
        expect(r.extra_time).to eq(10.0)
        expect(r.notes).to eq("weld")
        expect(r.machine).to eq("2")
        expect(r.side).to eq("N/A")
        expect(r.time_in).to eq("2015-02-23T11:33:27-05:00")
        expect(r.time_out).to eq("2015-02-23T11:34:04-05:00")
        expect(r.cycle).to eq(12.50)
      end
      
      it "should create a luggage_hook record" do
        r = FormExtensions::JigCleaningRecord.where(jig_type:"Luggage Hook").first
        expect(r.count).to eq(1)
        expect(r.extra_time).to eq(10.0)
        expect(r.notes).to eq("hook")
        expect(r.machine).to eq("2")
        expect(r.side).to eq("N/A")
        expect(r.time_in).to eq("2015-02-23T11:33:27-05:00")
        expect(r.time_out).to eq("2015-02-23T11:34:04-05:00")
        expect(r.cycle).to eq(12.50)
      end
      
      it "should create a Fuel Lid record" do
        r = FormExtensions::JigCleaningRecord.where(jig_type:"Fuel Lid").first
        expect(r.count).to eq(12)
        expect(r.extra_time).to eq(10.0)
        expect(r.notes).to eq("lid")
        expect(r.machine).to eq("2")
        expect(r.side).to eq("N/A")
        expect(r.time_in).to eq("2015-02-23T11:33:27-05:00")
        expect(r.time_out).to eq("2015-02-23T11:34:04-05:00")
        expect(r.cycle).to eq(12.50)
      end
      
      describe "update" do
        before(:each) do
          form.notes_fuel_lid = "update"
          form.save!
        end
        
        it "should update the corresponding jig cleaning record when the form is updated" do
          expect(Forms::JigCleaning.count).to eq(1)
          expect(FormExtensions::JigCleaningRecord.count).to eq(8)
          expect(form.jig_cleaning_records.count).to eq(8)
          
          r = FormExtensions::JigCleaningRecord.where(jig_type:"Fuel Lid").first
          expect(r.count).to eq(12)
          expect(r.extra_time).to eq(10.0)
          expect(r.notes).to eq("update")
          expect(r.machine).to eq("2")
          expect(r.side).to eq("N/A")
          expect(r.time_in).to eq("2015-02-23T11:33:27-05:00")
          expect(r.time_out).to eq("2015-02-23T11:34:04-05:00")
          expect(r.cycle).to eq(12.50)
        end
      end
      
      describe "null and 0 case" do
        before(:each) do
          form.count_fuel_lid = "null"
          form.count_weld = 0
          form.save!
        end
        
        it "should update the corresponding jig cleaning record when the form is updated" do
          expect(Forms::JigCleaning.count).to eq(1)
          expect(FormExtensions::JigCleaningRecord.count).to eq(6)
          expect(form.jig_cleaning_records.count).to eq(6)
          
          expect(FormExtensions::JigCleaningRecord.where(jig_type:"Fuel Lid").count).to eq(0)
          expect(FormExtensions::JigCleaningRecord.where(jig_type:"Weld").count).to eq(0)
        end
      end
    end
  end
end