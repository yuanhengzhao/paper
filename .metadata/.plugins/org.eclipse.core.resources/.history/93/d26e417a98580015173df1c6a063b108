require_relative '../../spec_helper'

describe ProntoForms::NetPromoterScoreParser do

  let(:missing_image) { "/assets/missing.jpg" }

  subject { ProntoForms::NetPromoterScoreParser.new }

  it "should have a NAME constant with the expected value" do
    ProntoForms::NetPromoterScoreParser::NAME.should eq("Net Promoter Score")
  end

  describe "max_version" do
    subject { ProntoForms::NetPromoterScoreParser.new }
    it "should not throw an error" do
      lambda { subject.max_version }.should_not raise_error
    end
  end

  describe "parse" do

  # call the parse method on a parameter defined in the sub-describes
    subject { ProntoForms::NetPromoterScoreParser.new.parse(form_hash) }

    # ensure that form_hash has been properly set for the specs
    before(:each) do
      form_hash.should_not be_nil
    end

    describe "for a hash missing pages" do

      let(:form_hash) {
        f = Rails.root.join('spec', 'resources', 'forms', 'net_promoter_score', 'missing_pages.json')
        return ActiveSupport::JSON.decode(f.read)
      }

      it "should throw a parser error" do
        lambda { subject }.should raise_error(ParserException, "Could not find expected answer [page: 0][answer: 6]")
      end

    end

    describe "for a valid hash" do

      let(:form_hash) {
        f = Rails.root.join('spec', 'resources', 'forms', 'net_promoter_score', 'valid.json')
        return ActiveSupport::JSON.decode(f.read)
      }

      let(:expected) {
        o = Forms::NetPromoterScore.new

        o.reference_number = "20150128-1818717921"
        o.server_receive_date = "2015-01-28T15:05:46Z"
        o.device_submit_date = "2015-01-28T10:05:38-05:00"
        o.username = "mliao@robinsonsolutions.com"
        o.version = "1"
        o.altitude = nil
        o.latitude = "43.6520358"
        o.longitude = "-79.3820901"
        o.source = "prontoforms"

        o.client          = "Toyota"
        o.site            = "Cambridge"
        o.shop            = "North Paint"
        o.contact         = "John Doe"
        o.title           = "Area Manager"
        o.department      = "Production"
        o.impact_level    = "Decision Maker"
        o.nps             = "1"
        o.suggestion      = "suggestion"

        return o
      }

      it "should return a Forms::NetPromoterScore object" do
        subject.should be_a_kind_of(Forms::NetPromoterScore)
      end
      
      it "should be valid" do
        expect(subject).to  be_valid
        expect(expected).to be_valid
      end

      describe "should match expected" do

        before(:each) do
          subject.save
          subject.reload
        end

        it "should have the same base form values" do
          expect(subject).to have_same_base_form_attributes_as(expected)
        end

        it "should have the same values as expected" do
          subject.client.should eq(expected.client)
          subject.site.should eq(expected.site)
          subject.shop.should eq(expected.shop)
          subject.contact.should eq(expected.contact)
          subject.title.should eq(expected.title)
          subject.impact_level.should eq(expected.impact_level)
          subject.department.should eq(expected.department)
          subject.nps.should eq(expected.nps)
          subject.suggestion.should eq(expected.suggestion)
        end
      end
    end

  end

end